from datetime import datetime, timedelta, timezone

IST = timezone(timedelta(hours=5, minutes=30))

def get_ist_time():
    return datetime.now(IST)

def convert_ist_to_utc(ist_time):
    if ist_time is None:
        return ""
    return ist_time.astimezone(timezone.utc)

def get_same_day_time(current_time, hour, minute):
    return current_time.replace(hour=hour, minute=minute, second=0, microsecond=0)

def get_next_js_day_time(current_time, target_js_day, hour, minute):
    current_js_day = (current_time.weekday() + 1) % 7  # 0: Sunday, 1: Monday, etc.
    target_time_today = current_time.replace(hour=hour, minute=minute, second=0, microsecond=0)
    days_ahead = (target_js_day - current_js_day) % 7
    if days_ahead == 0:
        if current_time < target_time_today:
            days_ahead = 0
        else:
            days_ahead = 1
    target_date = current_time + timedelta(days=days_ahead)
    return target_date.replace(hour=hour, minute=minute, second=0, microsecond=0)

def get_webinar_switch_day():
    """
    Determine which webinar branch to follow.
    Logic:
      - For Sunday (js_day == 0): if time >= 10am, use Wednesday branch.
      - For Monday (js_day == 1): always use Wednesday branch.
      - For Tuesday (js_day == 2): if time is before 18:30, use Wednesday; otherwise, use Sunday branch.
      - For Wednesday (js_day == 3): if time is before 20:00, use Wednesday; otherwise, use Sunday branch.
      - All other days default to Sunday branch.
    """
    ist_now = get_ist_time()
    current_day = ist_now.weekday()
    current_hour = ist_now.hour
    current_minute = ist_now.minute
    js_day = (current_day + 1) % 7
    if js_day == 0 and current_hour >= 10:
        return 3
    elif js_day == 1:
        return 3
    elif js_day == 2:
        if current_hour < 18 or (current_hour == 18 and current_minute < 30):
            return 3
        else:
            return 0
    elif js_day == 3:
        if current_hour < 20:
            return 3
        else:
            return 0
    else:
        return 0

def get_email_sequence_info():
    ist_now = get_ist_time()
    js_day = (ist_now.weekday() + 1) % 7
    hour = ist_now.hour
    minute = ist_now.minute
    webinar_day_code = get_webinar_switch_day()
    if webinar_day_code == 3:
        result = get_wednesday_sequence(ist_now, js_day, hour, minute)
    else:
        result = get_sunday_sequence(ist_now, js_day, hour, minute)
    if result['tag'] == "Void time for Engagement emails":
        webinar_day_str = "Void time for Engagement emails"
        delay_until_ist = ""
        delay_until_utc = ""
    else:
        webinar_day_str = 'Wednesday' if webinar_day_code == 3 else 'Sunday'
        delay_until_ist = result['delay_until'].strftime('%Y-%m-%d %H:%M:%S IST')
        delay_until_utc = convert_ist_to_utc(result['delay_until']).strftime('%Y-%m-%d %H:%M:%S')
    result.update({
        'webinar_day': webinar_day_str,
        'registration_time_ist': ist_now.strftime('%Y-%m-%d %H:%M:%S IST'),
        'delay_until_utc': delay_until_utc,
        'delay_until_ist': delay_until_ist,
    })
    return result

def get_wednesday_sequence(now, js_day, hour, minute):
    """
    Wednesday branch (for registrations on Sunday to Tuesday) with these windows:
      - If registration happens on Sunday (js_day==0) at >= 10 am OR on Monday (js_day==1) BEFORE 8 am:
            → Tag: "Wednesday Reminder email sequence 1"
            → Delay until Monday 8:00 IST.
      - If registration happens on Monday (js_day==1) between 8:00 and 18:30:
            → Tag: "Wednesday Reminder email sequence 2"
            → Delay until Monday 18:30 IST.
      - If registration happens on Monday (js_day==1) after 18:30 OR on Tuesday (js_day==2) BEFORE 8 am:
            → Tag: "Wednesday Reminder email sequence 3"
            → Delay until Tuesday 8:00 IST.
      - If registration happens on Tuesday (js_day==2) between 8:00 and 18:30:
            → Tag: "Wednesday Reminder email sequence 4"
            → Delay until Tuesday 18:30 IST.
      - Otherwise, return void.
    """
    if (js_day == 0 and hour >= 10) or (js_day == 1 and hour < 8):
        delay = get_next_js_day_time(now, 1, 8, 0) if js_day == 0 else get_same_day_time(now, 8, 0)
        return {
            'tag': 'Wednesday Reminder email sequence 1',
            'delay_until': delay
        }
    elif js_day == 1 and ((hour == 8 and minute >= 0) or (8 < hour < 18 or (hour == 18 and minute < 30))):
        return {
            'tag': 'Wednesday Reminder email sequence 2',
            'delay_until': get_same_day_time(now, 18, 30)
        }
    elif (js_day == 1 and (hour > 18 or (hour == 18 and minute >= 30))) or (js_day == 2 and hour < 8):
        delay = get_next_js_day_time(now, 2, 8, 0) if js_day == 1 else get_same_day_time(now, 8, 0)
        return {
            'tag': 'Wednesday Reminder email sequence 3',
            'delay_until': delay
        }
    elif js_day == 2 and ((hour == 8 and minute >= 0) or (8 < hour < 18 or (hour == 18 and minute < 30))):
        return {
            'tag': 'Wednesday Reminder email sequence 4',
            'delay_until': get_same_day_time(now, 18, 30)
        }
    else:
        return {
            'tag': 'Void time for Engagement emails',
            'delay_until': None
        }

def get_sunday_sequence(now, js_day, hour, minute):
    """
    Sunday branch (for registrations on Wednesday to Sunday) with these windows:
      - If registration happens between Wednesday 10 am and Thursday 8 am:
            → Tag: "Sunday Reminder email sequence 1"
            → Delay until Thursday 8:00 IST.
      - If registration happens on Thursday between 8:00 and 18:30:
            → Tag: "Sunday Reminder email sequence 2"
            → Delay until Thursday 18:30 IST.
      - If registration happens on Thursday after 18:30 or on Friday before 8 am:
            → Tag: "Sunday Reminder email sequence 3"
            → Delay until Friday 8:00 IST.
      - If registration happens on Friday between 8:00 and 18:30:
            → Tag: "Sunday Reminder email sequence 4"
            → Delay until Friday 18:30 IST.
      - Otherwise, return void.
    """
    if (js_day == 3 and hour >= 10) or (js_day == 4 and hour < 8):
        return {
            'tag': 'Sunday Reminder email sequence 1',
            'delay_until': get_next_js_day_time(now, 4, 8, 0)
        }
    elif js_day == 4 and (hour < 18 or (hour == 18 and minute < 30)):
        return {
            'tag': 'Sunday Reminder email sequence 2',
            'delay_until': get_same_day_time(now, 18, 30)
        }
    elif (js_day == 4 and (hour > 18 or (hour == 18 and minute >= 30))) or (js_day == 5 and hour < 8):
        return {
            'tag': 'Sunday Reminder email sequence 3',
            'delay_until': get_next_js_day_time(now, 5, 8, 0)
        }
    elif js_day == 5 and (hour < 18 or (hour == 18 and minute < 30)):
        return {
            'tag': 'Sunday Reminder email sequence 4',
            'delay_until': get_same_day_time(now, 18, 30)
        }
    else:
        return {
            'tag': 'Void time for Engagement emails',
            'delay_until': None
        }

def main():
    try:
        result = get_email_sequence_info()
        return {
            'success': True,
            'webinar_day': result['webinar_day'],
            'registration_time_ist': result['registration_time_ist'],
            'tag': result['tag'],
            'delay_until_utc': result['delay_until_utc'],
            'delay_until_ist': result['delay_until_ist'],
            'Tag Name': result['tag'],
            'Delay until': result['delay_until_ist']
        }
    except Exception as e:
        return {
            'success': False,
            'error': str(e),
            'message': f"Error occurred: {str(e)}"
        }

output = main()
print(output)
